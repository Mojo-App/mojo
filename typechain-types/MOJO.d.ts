/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MOJOInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "add_new_attribute(uint256,string,string,string,string)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "attributesTable()": FunctionFragment;
    "attributes_metadataURI()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mainTable()": FunctionFragment;
    "main_metadataURI()": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeMint(address,string,string,string,string,string,string,string,string)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "update_animation_url(uint256,string)": FunctionFragment;
    "update_background_color(uint256,string)": FunctionFragment;
    "update_category(uint256,string)": FunctionFragment;
    "update_display_type(uint256,uint256,string)": FunctionFragment;
    "update_external_url(uint256,string)": FunctionFragment;
    "update_icon(uint256,uint256,string)": FunctionFragment;
    "update_image_data(uint256,string)": FunctionFragment;
    "update_trait_type(uint256,uint256,string)": FunctionFragment;
    "update_value(uint256,uint256,string)": FunctionFragment;
    "update_youtube_url(uint256,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add_new_attribute",
    values: [BigNumberish, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attributesTable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attributes_metadataURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "mainTable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "main_metadataURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeMint",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "update_animation_url",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "update_background_color",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "update_category",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "update_display_type",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "update_external_url",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "update_icon",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "update_image_data",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "update_trait_type",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "update_value",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "update_youtube_url",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_new_attribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attributesTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attributes_metadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mainTable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "main_metadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_animation_url",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_background_color",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_category",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_display_type",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_external_url",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_icon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_image_data",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_trait_type",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_value",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_youtube_url",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "NewNftMinted(address,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "animationUrlUpdated(address,uint256,uint256,string,uint256)": EventFragment;
    "backgroundColorUpdated(address,uint256,uint256,string,uint256)": EventFragment;
    "categoryUpdated(address,uint256,uint256,string,uint256)": EventFragment;
    "externalUrlUpdated(address,uint256,uint256,string,uint256)": EventFragment;
    "imageDataUpdated(address,uint256,uint256,string,uint256)": EventFragment;
    "newAttributeAdded(address,uint256,uint256,uint256)": EventFragment;
    "traitDisplayTypeUpdated(address,uint256,uint256,string,uint256,uint256)": EventFragment;
    "traitIconUpdated(address,uint256,uint256,string,uint256,uint256)": EventFragment;
    "traitTypeUpdated(address,uint256,uint256,string,uint256,uint256)": EventFragment;
    "valueUpdated(address,uint256,uint256,string,uint256,uint256)": EventFragment;
    "youtubeUrlUpdated(address,uint256,uint256,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewNftMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "animationUrlUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "backgroundColorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "categoryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "externalUrlUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "imageDataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "newAttributeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "traitDisplayTypeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "traitIconUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "traitTypeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "valueUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "youtubeUrlUpdated"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type NewNftMintedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    from: string;
    timestamp: BigNumber;
    tokenId: BigNumber;
  }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export type animationUrlUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber] & {
    from: string;
    timestamp: BigNumber;
    _metadataTableId: BigNumber;
    _animation_url: string;
    tokenId: BigNumber;
  }
>;

export type backgroundColorUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber] & {
    from: string;
    timestamp: BigNumber;
    _metadataTableId: BigNumber;
    _background_color: string;
    tokenId: BigNumber;
  }
>;

export type categoryUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber] & {
    from: string;
    timestamp: BigNumber;
    _metadataTableId: BigNumber;
    _category: string;
    tokenId: BigNumber;
  }
>;

export type externalUrlUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber] & {
    from: string;
    timestamp: BigNumber;
    _metadataTableId: BigNumber;
    _external_url: string;
    tokenId: BigNumber;
  }
>;

export type imageDataUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber] & {
    from: string;
    timestamp: BigNumber;
    _metadataTableId: BigNumber;
    _image_data: string;
    tokenId: BigNumber;
  }
>;

export type newAttributeAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    from: string;
    timestamp: BigNumber;
    tokenId: BigNumber;
    _trait_id: BigNumber;
  }
>;

export type traitDisplayTypeUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
    from: string;
    timestamp: BigNumber;
    _attributesTableId: BigNumber;
    _display_type: string;
    tokenId: BigNumber;
    _trait_id: BigNumber;
  }
>;

export type traitIconUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
    from: string;
    timestamp: BigNumber;
    _attributesTableId: BigNumber;
    _icon: string;
    tokenId: BigNumber;
    _trait_id: BigNumber;
  }
>;

export type traitTypeUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
    from: string;
    timestamp: BigNumber;
    _attributesTableId: BigNumber;
    _trait_type: string;
    tokenId: BigNumber;
    _trait_id: BigNumber;
  }
>;

export type valueUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
    from: string;
    timestamp: BigNumber;
    _attributesTableId: BigNumber;
    _value: string;
    tokenId: BigNumber;
    _trait_id: BigNumber;
  }
>;

export type youtubeUrlUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber] & {
    from: string;
    timestamp: BigNumber;
    _metadataTableId: BigNumber;
    _youtube_url: string;
    tokenId: BigNumber;
  }
>;

export class MOJO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MOJOInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    add_new_attribute(
      _tokenId: BigNumberish,
      _icon: string,
      _display_type: string,
      _trait_type: string,
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attributesTable(overrides?: CallOverrides): Promise<[string]>;

    attributes_metadataURI(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mainTable(overrides?: CallOverrides): Promise<[string]>;

    main_metadataURI(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeMint(
      to: string,
      _name: string,
      _description: string,
      _image_url: string,
      _category: string,
      _icon: string,
      _display_type: string,
      _trait_type: string,
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update_animation_url(
      tokenId: BigNumberish,
      _animation_url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update_background_color(
      tokenId: BigNumberish,
      _background_color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update_category(
      tokenId: BigNumberish,
      _category: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update_display_type(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _display_type: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update_external_url(
      tokenId: BigNumberish,
      _external_url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update_icon(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _icon: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update_image_data(
      tokenId: BigNumberish,
      _image_data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update_trait_type(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _trait_type: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update_value(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update_youtube_url(
      tokenId: BigNumberish,
      _youtube_url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  add_new_attribute(
    _tokenId: BigNumberish,
    _icon: string,
    _display_type: string,
    _trait_type: string,
    _value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attributesTable(overrides?: CallOverrides): Promise<string>;

  attributes_metadataURI(overrides?: CallOverrides): Promise<string>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mainTable(overrides?: CallOverrides): Promise<string>;

  main_metadataURI(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeMint(
    to: string,
    _name: string,
    _description: string,
    _image_url: string,
    _category: string,
    _icon: string,
    _display_type: string,
    _trait_type: string,
    _value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update_animation_url(
    tokenId: BigNumberish,
    _animation_url: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update_background_color(
    tokenId: BigNumberish,
    _background_color: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update_category(
    tokenId: BigNumberish,
    _category: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update_display_type(
    tokenId: BigNumberish,
    _trait_id: BigNumberish,
    _display_type: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update_external_url(
    tokenId: BigNumberish,
    _external_url: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update_icon(
    tokenId: BigNumberish,
    _trait_id: BigNumberish,
    _icon: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update_image_data(
    tokenId: BigNumberish,
    _image_data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update_trait_type(
    tokenId: BigNumberish,
    _trait_id: BigNumberish,
    _trait_type: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update_value(
    tokenId: BigNumberish,
    _trait_id: BigNumberish,
    _value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update_youtube_url(
    tokenId: BigNumberish,
    _youtube_url: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    add_new_attribute(
      _tokenId: BigNumberish,
      _icon: string,
      _display_type: string,
      _trait_type: string,
      _value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    attributesTable(overrides?: CallOverrides): Promise<string>;

    attributes_metadataURI(overrides?: CallOverrides): Promise<string>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mainTable(overrides?: CallOverrides): Promise<string>;

    main_metadataURI(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeMint(
      to: string,
      _name: string,
      _description: string,
      _image_url: string,
      _category: string,
      _icon: string,
      _display_type: string,
      _trait_type: string,
      _value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(baseURI: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    update_animation_url(
      tokenId: BigNumberish,
      _animation_url: string,
      overrides?: CallOverrides
    ): Promise<void>;

    update_background_color(
      tokenId: BigNumberish,
      _background_color: string,
      overrides?: CallOverrides
    ): Promise<void>;

    update_category(
      tokenId: BigNumberish,
      _category: string,
      overrides?: CallOverrides
    ): Promise<void>;

    update_display_type(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _display_type: string,
      overrides?: CallOverrides
    ): Promise<void>;

    update_external_url(
      tokenId: BigNumberish,
      _external_url: string,
      overrides?: CallOverrides
    ): Promise<void>;

    update_icon(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _icon: string,
      overrides?: CallOverrides
    ): Promise<void>;

    update_image_data(
      tokenId: BigNumberish,
      _image_data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    update_trait_type(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _trait_type: string,
      overrides?: CallOverrides
    ): Promise<void>;

    update_value(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    update_youtube_url(
      tokenId: BigNumberish,
      _youtube_url: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "NewNftMinted(address,uint256,uint256)"(
      from?: string | null,
      timestamp?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; timestamp: BigNumber; tokenId: BigNumber }
    >;

    NewNftMinted(
      from?: string | null,
      timestamp?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; timestamp: BigNumber; tokenId: BigNumber }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    "animationUrlUpdated(address,uint256,uint256,string,uint256)"(
      from?: string | null,
      timestamp?: null,
      _metadataTableId?: null,
      _animation_url?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _metadataTableId: BigNumber;
        _animation_url: string;
        tokenId: BigNumber;
      }
    >;

    animationUrlUpdated(
      from?: string | null,
      timestamp?: null,
      _metadataTableId?: null,
      _animation_url?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _metadataTableId: BigNumber;
        _animation_url: string;
        tokenId: BigNumber;
      }
    >;

    "backgroundColorUpdated(address,uint256,uint256,string,uint256)"(
      from?: string | null,
      timestamp?: null,
      _metadataTableId?: null,
      _background_color?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _metadataTableId: BigNumber;
        _background_color: string;
        tokenId: BigNumber;
      }
    >;

    backgroundColorUpdated(
      from?: string | null,
      timestamp?: null,
      _metadataTableId?: null,
      _background_color?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _metadataTableId: BigNumber;
        _background_color: string;
        tokenId: BigNumber;
      }
    >;

    "categoryUpdated(address,uint256,uint256,string,uint256)"(
      from?: string | null,
      timestamp?: null,
      _metadataTableId?: null,
      _category?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _metadataTableId: BigNumber;
        _category: string;
        tokenId: BigNumber;
      }
    >;

    categoryUpdated(
      from?: string | null,
      timestamp?: null,
      _metadataTableId?: null,
      _category?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _metadataTableId: BigNumber;
        _category: string;
        tokenId: BigNumber;
      }
    >;

    "externalUrlUpdated(address,uint256,uint256,string,uint256)"(
      from?: string | null,
      timestamp?: null,
      _metadataTableId?: null,
      _external_url?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _metadataTableId: BigNumber;
        _external_url: string;
        tokenId: BigNumber;
      }
    >;

    externalUrlUpdated(
      from?: string | null,
      timestamp?: null,
      _metadataTableId?: null,
      _external_url?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _metadataTableId: BigNumber;
        _external_url: string;
        tokenId: BigNumber;
      }
    >;

    "imageDataUpdated(address,uint256,uint256,string,uint256)"(
      from?: string | null,
      timestamp?: null,
      _metadataTableId?: null,
      _image_data?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _metadataTableId: BigNumber;
        _image_data: string;
        tokenId: BigNumber;
      }
    >;

    imageDataUpdated(
      from?: string | null,
      timestamp?: null,
      _metadataTableId?: null,
      _image_data?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _metadataTableId: BigNumber;
        _image_data: string;
        tokenId: BigNumber;
      }
    >;

    "newAttributeAdded(address,uint256,uint256,uint256)"(
      from?: string | null,
      timestamp?: null,
      tokenId?: null,
      _trait_id?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        tokenId: BigNumber;
        _trait_id: BigNumber;
      }
    >;

    newAttributeAdded(
      from?: string | null,
      timestamp?: null,
      tokenId?: null,
      _trait_id?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        tokenId: BigNumber;
        _trait_id: BigNumber;
      }
    >;

    "traitDisplayTypeUpdated(address,uint256,uint256,string,uint256,uint256)"(
      from?: string | null,
      timestamp?: null,
      _attributesTableId?: null,
      _display_type?: null,
      tokenId?: null,
      _trait_id?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _attributesTableId: BigNumber;
        _display_type: string;
        tokenId: BigNumber;
        _trait_id: BigNumber;
      }
    >;

    traitDisplayTypeUpdated(
      from?: string | null,
      timestamp?: null,
      _attributesTableId?: null,
      _display_type?: null,
      tokenId?: null,
      _trait_id?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _attributesTableId: BigNumber;
        _display_type: string;
        tokenId: BigNumber;
        _trait_id: BigNumber;
      }
    >;

    "traitIconUpdated(address,uint256,uint256,string,uint256,uint256)"(
      from?: string | null,
      timestamp?: null,
      _attributesTableId?: null,
      _icon?: null,
      tokenId?: null,
      _trait_id?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _attributesTableId: BigNumber;
        _icon: string;
        tokenId: BigNumber;
        _trait_id: BigNumber;
      }
    >;

    traitIconUpdated(
      from?: string | null,
      timestamp?: null,
      _attributesTableId?: null,
      _icon?: null,
      tokenId?: null,
      _trait_id?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _attributesTableId: BigNumber;
        _icon: string;
        tokenId: BigNumber;
        _trait_id: BigNumber;
      }
    >;

    "traitTypeUpdated(address,uint256,uint256,string,uint256,uint256)"(
      from?: string | null,
      timestamp?: null,
      _attributesTableId?: null,
      _trait_type?: null,
      tokenId?: null,
      _trait_id?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _attributesTableId: BigNumber;
        _trait_type: string;
        tokenId: BigNumber;
        _trait_id: BigNumber;
      }
    >;

    traitTypeUpdated(
      from?: string | null,
      timestamp?: null,
      _attributesTableId?: null,
      _trait_type?: null,
      tokenId?: null,
      _trait_id?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _attributesTableId: BigNumber;
        _trait_type: string;
        tokenId: BigNumber;
        _trait_id: BigNumber;
      }
    >;

    "valueUpdated(address,uint256,uint256,string,uint256,uint256)"(
      from?: string | null,
      timestamp?: null,
      _attributesTableId?: null,
      _value?: null,
      tokenId?: null,
      _trait_id?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _attributesTableId: BigNumber;
        _value: string;
        tokenId: BigNumber;
        _trait_id: BigNumber;
      }
    >;

    valueUpdated(
      from?: string | null,
      timestamp?: null,
      _attributesTableId?: null,
      _value?: null,
      tokenId?: null,
      _trait_id?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _attributesTableId: BigNumber;
        _value: string;
        tokenId: BigNumber;
        _trait_id: BigNumber;
      }
    >;

    "youtubeUrlUpdated(address,uint256,uint256,string,uint256)"(
      from?: string | null,
      timestamp?: null,
      _metadataTableId?: null,
      _youtube_url?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _metadataTableId: BigNumber;
        _youtube_url: string;
        tokenId: BigNumber;
      }
    >;

    youtubeUrlUpdated(
      from?: string | null,
      timestamp?: null,
      _metadataTableId?: null,
      _youtube_url?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        timestamp: BigNumber;
        _metadataTableId: BigNumber;
        _youtube_url: string;
        tokenId: BigNumber;
      }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    add_new_attribute(
      _tokenId: BigNumberish,
      _icon: string,
      _display_type: string,
      _trait_type: string,
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attributesTable(overrides?: CallOverrides): Promise<BigNumber>;

    attributes_metadataURI(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainTable(overrides?: CallOverrides): Promise<BigNumber>;

    main_metadataURI(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeMint(
      to: string,
      _name: string,
      _description: string,
      _image_url: string,
      _category: string,
      _icon: string,
      _display_type: string,
      _trait_type: string,
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update_animation_url(
      tokenId: BigNumberish,
      _animation_url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update_background_color(
      tokenId: BigNumberish,
      _background_color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update_category(
      tokenId: BigNumberish,
      _category: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update_display_type(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _display_type: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update_external_url(
      tokenId: BigNumberish,
      _external_url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update_icon(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _icon: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update_image_data(
      tokenId: BigNumberish,
      _image_data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update_trait_type(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _trait_type: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update_value(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update_youtube_url(
      tokenId: BigNumberish,
      _youtube_url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    add_new_attribute(
      _tokenId: BigNumberish,
      _icon: string,
      _display_type: string,
      _trait_type: string,
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attributesTable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    attributes_metadataURI(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainTable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    main_metadataURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeMint(
      to: string,
      _name: string,
      _description: string,
      _image_url: string,
      _category: string,
      _icon: string,
      _display_type: string,
      _trait_type: string,
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update_animation_url(
      tokenId: BigNumberish,
      _animation_url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update_background_color(
      tokenId: BigNumberish,
      _background_color: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update_category(
      tokenId: BigNumberish,
      _category: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update_display_type(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _display_type: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update_external_url(
      tokenId: BigNumberish,
      _external_url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update_icon(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _icon: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update_image_data(
      tokenId: BigNumberish,
      _image_data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update_trait_type(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _trait_type: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update_value(
      tokenId: BigNumberish,
      _trait_id: BigNumberish,
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update_youtube_url(
      tokenId: BigNumberish,
      _youtube_url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
