/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ITablelandTablesInterface extends ethers.utils.Interface {
  functions: {
    "createTable(address,string)": FunctionFragment;
    "getController(uint256)": FunctionFragment;
    "lockController(address,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "runSQL(address,uint256,string)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setController(address,uint256,address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createTable",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getController",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockController",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "runSQL",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "runSQL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "CreateTable(address,uint256,string)": EventFragment;
    "RunSQL(address,bool,uint256,string,tuple)": EventFragment;
    "SetController(uint256,address)": EventFragment;
    "TransferTable(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateTable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RunSQL"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferTable"): EventFragment;
}

export type CreateTableEvent = TypedEvent<
  [string, BigNumber, string] & {
    owner: string;
    tableId: BigNumber;
    statement: string;
  }
>;

export type RunSQLEvent = TypedEvent<
  [
    string,
    boolean,
    BigNumber,
    string,
    [boolean, boolean, boolean, string, string, string[]] & {
      allowInsert: boolean;
      allowUpdate: boolean;
      allowDelete: boolean;
      whereClause: string;
      withCheck: string;
      updatableColumns: string[];
    }
  ] & {
    caller: string;
    isOwner: boolean;
    tableId: BigNumber;
    statement: string;
    policy: [boolean, boolean, boolean, string, string, string[]] & {
      allowInsert: boolean;
      allowUpdate: boolean;
      allowDelete: boolean;
      whereClause: string;
      withCheck: string;
      updatableColumns: string[];
    };
  }
>;

export type SetControllerEvent = TypedEvent<
  [BigNumber, string] & { tableId: BigNumber; controller: string }
>;

export type TransferTableEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tableId: BigNumber }
>;

export class ITablelandTables extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITablelandTablesInterface;

  functions: {
    createTable(
      owner: string,
      statement: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getController(
      tableId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockController(
      caller: string,
      tableId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    runSQL(
      caller: string,
      tableId: BigNumberish,
      statement: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setController(
      caller: string,
      tableId: BigNumberish,
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createTable(
    owner: string,
    statement: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getController(
    tableId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockController(
    caller: string,
    tableId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  runSQL(
    caller: string,
    tableId: BigNumberish,
    statement: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setController(
    caller: string,
    tableId: BigNumberish,
    controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createTable(
      owner: string,
      statement: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getController(
      tableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    lockController(
      caller: string,
      tableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    runSQL(
      caller: string,
      tableId: BigNumberish,
      statement: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(baseURI: string, overrides?: CallOverrides): Promise<void>;

    setController(
      caller: string,
      tableId: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CreateTable(address,uint256,string)"(
      owner?: null,
      tableId?: null,
      statement?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { owner: string; tableId: BigNumber; statement: string }
    >;

    CreateTable(
      owner?: null,
      tableId?: null,
      statement?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { owner: string; tableId: BigNumber; statement: string }
    >;

    "RunSQL(address,bool,uint256,string,tuple)"(
      caller?: null,
      isOwner?: null,
      tableId?: null,
      statement?: null,
      policy?: null
    ): TypedEventFilter<
      [
        string,
        boolean,
        BigNumber,
        string,
        [boolean, boolean, boolean, string, string, string[]] & {
          allowInsert: boolean;
          allowUpdate: boolean;
          allowDelete: boolean;
          whereClause: string;
          withCheck: string;
          updatableColumns: string[];
        }
      ],
      {
        caller: string;
        isOwner: boolean;
        tableId: BigNumber;
        statement: string;
        policy: [boolean, boolean, boolean, string, string, string[]] & {
          allowInsert: boolean;
          allowUpdate: boolean;
          allowDelete: boolean;
          whereClause: string;
          withCheck: string;
          updatableColumns: string[];
        };
      }
    >;

    RunSQL(
      caller?: null,
      isOwner?: null,
      tableId?: null,
      statement?: null,
      policy?: null
    ): TypedEventFilter<
      [
        string,
        boolean,
        BigNumber,
        string,
        [boolean, boolean, boolean, string, string, string[]] & {
          allowInsert: boolean;
          allowUpdate: boolean;
          allowDelete: boolean;
          whereClause: string;
          withCheck: string;
          updatableColumns: string[];
        }
      ],
      {
        caller: string;
        isOwner: boolean;
        tableId: BigNumber;
        statement: string;
        policy: [boolean, boolean, boolean, string, string, string[]] & {
          allowInsert: boolean;
          allowUpdate: boolean;
          allowDelete: boolean;
          whereClause: string;
          withCheck: string;
          updatableColumns: string[];
        };
      }
    >;

    "SetController(uint256,address)"(
      tableId?: null,
      controller?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { tableId: BigNumber; controller: string }
    >;

    SetController(
      tableId?: null,
      controller?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { tableId: BigNumber; controller: string }
    >;

    "TransferTable(address,address,uint256)"(
      from?: null,
      to?: null,
      tableId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tableId: BigNumber }
    >;

    TransferTable(
      from?: null,
      to?: null,
      tableId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tableId: BigNumber }
    >;
  };

  estimateGas: {
    createTable(
      owner: string,
      statement: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getController(
      tableId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockController(
      caller: string,
      tableId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    runSQL(
      caller: string,
      tableId: BigNumberish,
      statement: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setController(
      caller: string,
      tableId: BigNumberish,
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createTable(
      owner: string,
      statement: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getController(
      tableId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockController(
      caller: string,
      tableId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    runSQL(
      caller: string,
      tableId: BigNumberish,
      statement: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      caller: string,
      tableId: BigNumberish,
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
